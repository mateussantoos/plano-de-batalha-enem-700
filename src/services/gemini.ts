// src/services/gemini.ts
import type {
  GeneratedQuestionsResponse,
  StudyMaterialContent,
} from "../types";

const apiKey = import.meta.env.VITE_GEMINI_API_KEY || "";

export const generateRepertoire = async (theme: string): Promise<string> => {
  const prompt = `Para o tema de reda√ß√£o do ENEM "${theme}", gere um repert√≥rio sociocultural rico e diversificado, em portugu√™s. Organize a resposta em uma lista com os seguintes itens: 1. Uma cita√ß√£o filos√≥fica ou de um pensador relevante com breve explica√ß√£o. 2. Um dado estat√≠stico ou relat√≥rio de uma fonte confi√°vel. 3. Um fato hist√≥rico relacionado. 4. Um livro, filme ou s√©rie que ilustre o problema. Para cada item, forne√ßa um pequeno texto explicando como ele pode ser usado na reda√ß√£o.`;
  const payload = { contents: [{ role: "user", parts: [{ text: prompt }] }] };
  const response = await fetch(
    `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=${apiKey}`,
    {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(payload),
    }
  );
  if (!response.ok) throw new Error(`API error: ${response.statusText}`);
  const result = await response.json();
  if (
    result.candidates &&
    result.candidates.length > 0 &&
    result.candidates[0].content.parts[0].text
  ) {
    return result.candidates[0].content.parts[0].text;
  }
  throw new Error("Resposta da API vazia ou inv√°lida.");
};

export const generateQuestions = async (
  topic: string
): Promise<GeneratedQuestionsResponse> => {
  const prompt = `Gere 2 quest√µes de m√∫ltipla escolha, em portugu√™s e no estilo do ENEM, sobre o t√≥pico "${topic}".`;
  const generationConfig = {
    responseMimeType: "application/json",
    responseSchema: {
      type: "OBJECT",
      properties: {
        questions: {
          type: "ARRAY",
          items: {
            type: "OBJECT",
            properties: {
              question_text: { type: "STRING" },
              options: { type: "ARRAY", items: { type: "STRING" } },
              correct_answer_index: { type: "NUMBER" },
              explanation: { type: "STRING" },
            },
          },
        },
      },
    },
  };
  const payload = {
    contents: [{ role: "user", parts: [{ text: prompt }] }],
    generationConfig,
  };
  const response = await fetch(
    `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=${apiKey}`,
    {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(payload),
    }
  );
  if (!response.ok) throw new Error(`API error: ${response.statusText}`);
  const result = await response.json();
  if (result.candidates && result.candidates[0].content.parts[0].text) {
    return JSON.parse(result.candidates[0].content.parts[0].text);
  }
  throw new Error("Resposta da API vazia ou inv√°lida.");
};

export const generateStudyMaterial = async (
  topic: string
): Promise<StudyMaterialContent> => {
  const prompt = `
  Atue como um tutor de matem√°tica super amig√°vel e did√°tico, com um estilo visual e "fofo".
  Sua miss√£o √© criar um material de estudo completo sobre o t√≥pico de matem√°tica para o ENEM: "${topic}".
  A explica√ß√£o deve ser perfeita para um iniciante, muito clara e passo a passo.

  **REGRAS DE FORMATA√á√ÉO OBRIGAT√ìRIAS:**
  1.  Use emojis como üéì, ‚ú®, üß†, üéØ, üí°, ‚úÖ.
  2.  Estruture a resposta em se√ß√µes claras usando t√≠tulos diretos em Markdown com \`##\`.
  3.  **F√≥rmulas Matem√°ticas:** TODAS as f√≥rmulas, sem exce√ß√£o, devem ser formatadas usando a sintaxe KaTeX em modo de BLOCO (\`$$\`). **NUNCA use o formato inline (\`$\`)**.
  4.  **Use quebras de linha DUPLAS (dois '\\n') entre par√°grafos, listas, e ANTES e DEPOIS de cada bloco de f√≥rmula KaTeX para garantir a renderiza√ß√£o correta.**
  5.  Use negrito (\`**\`) para destacar termos-chave.
  6.  Todo o conte√∫do deve ser em formato Markdown.
`;

  const generationConfig = {
    responseMimeType: "application/json",
    responseSchema: {
      type: "OBJECT",
      properties: {
        introduction: {
          type: "STRING",
          description: "Uma introdu√ß√£o amig√°vel e divertida sobre o t√≥pico.",
        },
        coreConcepts: {
          type: "ARRAY",
          description:
            "Uma lista dos conceitos principais, cada um com t√≠tulo e explica√ß√£o.",
          items: {
            type: "OBJECT",
            properties: {
              title: {
                type: "STRING",
                description:
                  "O t√≠tulo do conceito (ex: '‚ú® O que √© uma Fun√ß√£o?').",
              },
              explanation: {
                type: "STRING",
                description: "A explica√ß√£o detalhada do conceito em Markdown.",
              },
            },
          },
        },
        practicalExample: {
          type: "OBJECT",
          description:
            "Um exemplo pr√°tico com descri√ß√£o e resolu√ß√£o passo a passo.",
          properties: {
            description: {
              type: "STRING",
              description: "A descri√ß√£o do problema do exemplo.",
            },
            resolution: {
              type: "STRING",
              description: "A resolu√ß√£o passo a passo do exemplo em Markdown.",
            },
          },
        },
        enemTip: {
          type: "STRING",
          description:
            "Uma dica final de como este t√≥pico costuma cair no ENEM.",
        },
      },
    },
  };

  try {
    const payload = {
      contents: [{ role: "user", parts: [{ text: prompt }] }],
      generationConfig,
    };
    const response = await fetch(
      `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=${apiKey}`,
      {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(payload),
      }
    );
    if (!response.ok) {
      console.error("API Error Response:", await response.text());
      throw new Error(`API error: ${response.statusText}`);
    }
    const result = await response.json();
    if (
      result.candidates &&
      result.candidates.length > 0 &&
      result.candidates[0].content.parts[0].text
    ) {
      return JSON.parse(result.candidates[0].content.parts[0].text);
    }
    throw new Error("N√£o foi poss√≠vel gerar o material de estudo.");
  } catch (error) {
    console.error("Erro ao gerar material de estudo com Gemini:", error);
    throw new Error(
      "Falha ao gerar material de estudo. Verifique o console para mais detalhes."
    );
  }
};
